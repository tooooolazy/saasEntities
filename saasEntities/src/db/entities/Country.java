package db.entities;

// Generated 7 ���� 2012 5:36:20 �� by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Cacheable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;

import org.hibernate.annotations.BatchSize;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

import com.tooooolazy.gwt.widgets.shared.SelectItem;
import com.tooooolazy.util.Messages;

import db.enums.StatusEnum;

/**
 * Country generated by hbm2java
 */
@Entity
@BatchSize(size=50)
@Table(name = "countries_iso")
@Cacheable
@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
public class Country implements java.io.Serializable, SelectItem {

	private String alpha2Code;
	private Label label;
	private Language language;
	private String alpha3Code;
	private Short numCode;
	private Date crDate;
	private Date edDate;
	private StatusEnum status;
	private Set<County> counties = new HashSet<County>(0);

	public Country() {
	}

	public Country(String alpha2Code, String alpha3Code, short numCode) {
		this.alpha2Code = alpha2Code;
		this.alpha3Code = alpha3Code;
		this.numCode = numCode;
	}

	public Country(String alpha2Code, Label label, Language language, String alpha3Code, short numCode, Date crDate, Date edDate, Set<County> counties) {
		this.alpha2Code = alpha2Code;
		this.label = label;
		this.language = language;
		this.alpha3Code = alpha3Code;
		this.numCode = numCode;
		this.crDate = crDate;
		this.edDate = edDate;
		this.counties = counties;
	}

	@Id
	@Column(name = "alpha2_code", unique = true, nullable = false, length = 2)
	public String getAlpha2Code() {
		return this.alpha2Code;
	}

	public void setAlpha2Code(String alpha2Code) {
		this.alpha2Code = alpha2Code;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "label_id")
	public Label getLabel() {
		return this.label;
	}

	public void setLabel(Label label) {
		this.label = label;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "def_lang_id")
	public Language getLanguage() {
		return this.language;
	}

	public void setLanguage(Language language) {
		this.language = language;
	}

	@Column(name = "alpha3_code", nullable = false, length = 3)
	public String getAlpha3Code() {
		return this.alpha3Code;
	}

	public void setAlpha3Code(String alpha3Code) {
		this.alpha3Code = alpha3Code;
	}

	@Column(name = "num_code", nullable = false)
	@NotNull
	public Short getNumCode() {
		return this.numCode;
	}

	public void setNumCode(Short numCode) {
		this.numCode = numCode;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "cr_date", length = 19)
	public Date getCrDate() {
		return this.crDate;
	}

	public void setCrDate(Date crDate) {
		this.crDate = crDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "ed_date", length = 19)
	public Date getEdDate() {
		return this.edDate;
	}

	public void setEdDate(Date edDate) {
		this.edDate = edDate;
	}

	@Column(name = "status", columnDefinition="smallint")
	public StatusEnum getStatus() {
		return this.status;
	}

	public void setStatus(StatusEnum status) {
		this.status = status;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "country")
	public Set<County> getCounties() {
		return this.counties;
	}

	public void setCounties(Set<County> counties) {
		this.counties = counties;
	}

	@Override
	@Transient
	public Object getPK() {
		return getAlpha2Code();
	}

	@Override
	@Transient
	public boolean hasLangDefined(String lang) {
		if (getLabel() != null) {
			for (LabelML ml : getLabel().getLabelMLs()) {
				if (ml.getLanguage().getLanguage().equals(lang))
					return true;
			}
		}
		return false;
	}
	@Override
	@Transient
	public String getDisplayValue(String lang) {
		if (getLabel() != null) {
			return getLabel().getDisplayValue(lang);
		}
		return getDefaultValue();
	}
	@Override
	@Transient
	public String getDefaultValue() {
		return getAlpha3Code();
	}
	public String toString() {
		String s = getDisplayValue(Messages.getLang());
		if (s != null)
			return s;
//			s = getAlpha2Code() + ": " + getAlpha3Code() + " ("+s+")";
		else
			s = getAlpha2Code() + ": " + getAlpha3Code();
		return s;
	}
}
