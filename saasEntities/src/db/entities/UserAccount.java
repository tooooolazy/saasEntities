package db.entities;

// Generated 20 ��� 2012 1:47:30 �� by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.BatchSize;

import db.enums.StatusEnum;

/**
 * UserAccount generated by hbm2java
 */
@Entity
@BatchSize(size=20)
@Table(name = "useraccount")
public class UserAccount implements java.io.Serializable {

	private Integer id;
	private TypedValue defEmail;
	private TypedValue defPhone;
	private User userByEdUserId;
	private User userByCrUserId;
	private User userById;
	private StatusEnum status;
	private String firstName;
	private String middleName;
	private String lastName;
	private Label title;
	private String titleStr;
	private Label secondaryTitle;
	private Label profession;
	private String professionStr;
	private Date crDate;
	private Date edDate;
	private Boolean isDeleted;

	public UserAccount() {
	}

	public UserAccount(User userById, Date crDate) {
		this.userById = userById;
		this.crDate = crDate;
	}

	public UserAccount(TypedValue defEmail, User userByEdUserId, User userByCrUserId, User userById, String firstName, String lastName, Date crDate,
			Date edDate) {
		this.defEmail = defEmail;
		this.userByEdUserId = userByEdUserId;
		this.userByCrUserId = userByCrUserId;
		this.userById = userById;
		this.firstName = firstName;
		this.lastName = lastName;
		this.crDate = crDate;
		this.edDate = edDate;
	}

//	@GenericGenerator(name = "generator", strategy = "foreign", parameters = @Parameter(name = "property", value = "userById"))
	@Id
//	@GeneratedValue(generator = "generator")
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "def_email_id")
	public TypedValue getDefEmail() {
		return this.defEmail;
	}

	public void setDefEmail(TypedValue defEmail) {
		this.defEmail = defEmail;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "def_phone_id")
	public TypedValue getDefPhone() {
		return this.defPhone;
	}

	public void setDefPhone(TypedValue defPhone) {
		this.defPhone = defPhone;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ed_user_id")
	public User getUserByEdUserId() {
		return this.userByEdUserId;
	}

	public void setUserByEdUserId(User userByEdUserId) {
		this.userByEdUserId = userByEdUserId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "cr_user_id")
	public User getUserByCrUserId() {
		return this.userByCrUserId;
	}

	public void setUserByCrUserId(User userByCrUserId) {
		this.userByCrUserId = userByCrUserId;
	}

	@OneToOne(fetch = FetchType.EAGER)
	@PrimaryKeyJoinColumn
	public User getUserById() {
		return this.userById;
	}

	public void setUserById(User userById) {
		this.userById = userById;
	}

	@Column(name = "status")
	public StatusEnum getStatus() {
		return this.status;
	}

	public void setStatus(StatusEnum status) {
		this.status = status;
	}

	@Column(name = "firstName", length = 45)
	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@Column(name = "middleName", length = 45)
	public String getMiddleName() {
		return this.middleName;
	}

	public void setMiddleName(String middleName) {
		this.middleName = middleName;
	}

	@Column(name = "lastName", length = 45)
	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Column(name = "deleted", nullable = false)
	public Boolean getIsDeleted() {
		return this.isDeleted;
	}

	public void setIsDeleted(Boolean isDeleted) {
		this.isDeleted = isDeleted;
	}


	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "title_id")
	public Label getTitle() {
		return this.title;
	}

	public void setTitle(Label title) {
		this.title = title;
	}

	@Column(name = "titleStr", length = 200)
	public String getTitleStr() {
		return this.titleStr;
	}

	public void setTitleStr(String titleStr) {
		this.titleStr = titleStr;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "secTitle_id")
	public Label getSecondaryTitle() {
		return this.secondaryTitle;
	}

	public void setSecondaryTitle(Label secondaryTitle) {
		this.secondaryTitle = secondaryTitle;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "prof_id")
	public Label getProfession() {
		return this.profession;
	}

	public void setProfession(Label profession) {
		this.profession = profession;
	}

	@Column(name = "profStr", length = 200)
	public String getProfessionStr() {
		return this.professionStr;
	}

	public void setProfessionStr(String professionStr) {
		this.professionStr = professionStr;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "cr_date", nullable = false, length = 19)
	public Date getCrDate() {
		return this.crDate;
	}

	public void setCrDate(Date crDate) {
		this.crDate = crDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "ed_date", length = 19)
	public Date getEdDate() {
		return this.edDate;
	}

	public void setEdDate(Date edDate) {
		this.edDate = edDate;
	}

	public String toString() {
		return getLastName() + " " + getFirstName() + ": " + getStatus();
	}
}
