package db.entities;

// Generated 21 ��� 2012 12:09:39 �� by Hibernate Tools 3.4.0.CR1

import db.enums.StatusEnum;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;

import org.hibernate.annotations.BatchSize;

import com.tooooolazy.util.bean.annotations.TlzHidden;

import db.enums.RoleEnum;

/**
 * User generated by hbm2java
 */
@Entity
@BatchSize(size=20)
@Table(name = "user", uniqueConstraints = @UniqueConstraint(columnNames = "username"))
public class User implements java.io.Serializable {

	private Integer id;
	private Language language;
	private String sessionId;
	private String username;
	private String password;
	private Date crDate;
	private Date edDate;
	private String salt;
	private Boolean rememberMe;
	private StatusEnum status;
	private Boolean isDeleted;
	private UserAccount userAccountById;
	private Set<Session> sessions = new HashSet<Session>(0);
//	private Set<Type> typesForCrUserId = new HashSet<Type>(0);
//	private Set<UserAccount> userAccountsForEdUserId = new HashSet<UserAccount>(0);
//	private Set<Label> labelsForEdUserId = new HashSet<Label>(0);
//	private Set<City> citiesForCrUserId = new HashSet<City>(0);
//	private Set<TypedValue> typedValuesForEdUserId = new HashSet<TypedValue>(0);
//	private Set<MethodSecurityLevelDef> methodSecurityLevelDefsForEdUserId = new HashSet<MethodSecurityLevelDef>(0);
	private Set<UserRole> userRoles = new HashSet<UserRole>(0);
//	private Set<Label> labelsForCrUserId = new HashSet<Label>(0);
//	private Set<TypedValue> typedValuesForCrUserId = new HashSet<TypedValue>(0);
//	private Set<UserAccount> userAccountsForCrUserId = new HashSet<UserAccount>(0);
//	private Set<Type> typesForEdUserId = new HashSet<Type>(0);
//	private Set<County> countiesForEdUserId = new HashSet<County>(0);
//	private Set<ObjectSecurityLevelDef> objectSecurityLevelDefsForCrUserId = new HashSet<ObjectSecurityLevelDef>(0);
//	private Set<County> countiesForCrUserId = new HashSet<County>(0);
//	private Set<City> citiesForEdUserId = new HashSet<City>(0);
//	private Set<LabelML> labelMLsForEdUserId = new HashSet<LabelML>(0);
//	private Set<ObjectSecurityLevelDef> objectSecurityLevelDefsForEdUserId = new HashSet<ObjectSecurityLevelDef>(0);
//	private Set<MethodSecurityLevelDef> methodSecurityLevelDefsForCrUserId = new HashSet<MethodSecurityLevelDef>(0);
//	private Set<LabelML> labelMLsForCrUserId = new HashSet<LabelML>(0);
	private Set<UserConnection> userConnections = new HashSet<UserConnection>(0);

	public User() {
	}

	public User(Language language, String sessionId, String username, String password, Date crDate) {
		this.language = language;
		this.sessionId = sessionId;
		this.username = username;
		this.password = password;
		this.crDate = crDate;
	}
	public User(Language language, String username, String password, Date crDate, String sSalt) {
		this.language = language;
		this.username = username;
		this.password = password;
		this.crDate = crDate;
		this.salt = sSalt;
	}

	public User(Language language, String sessionId, String username, String password, Date crDate, Date edDate, String salt, Boolean rememberMe,
			StatusEnum status, Set<Session> sessions, Set<Type> typesForCrUserId, Set<UserAccount> userAccountsForEdUserId,
			Set<Label> labelsForEdUserId, Set<City> citiesForCrUserId, Set<TypedValue> typedValuesForEdUserId,
			Set<MethodSecurityLevelDef> methodSecurityLevelDefsForEdUserId, Set<UserRole> userRoles, Set<Label> labelsForCrUserId,
			Set<TypedValue> typedValuesForCrUserId, Set<UserAccount> userAccountsForCrUserId, Set<Type> typesForEdUserId,
			Set<County> countiesForEdUserId, Set<ObjectSecurityLevelDef> objectSecurityLevelDefsForCrUserId,
			UserAccount userAccountById, Set<County> countiesForCrUserId, Set<City> citiesForEdUserId,
			Set<LabelML> labelMLsForEdUserId, Set<ObjectSecurityLevelDef> objectSecurityLevelDefsForEdUserId,
			Set<MethodSecurityLevelDef> methodSecurityLevelDefsForCrUserId, Set<LabelML> labelMLsForCrUserId) {
		this.language = language;
		this.sessionId = sessionId;
		this.username = username;
		this.password = password;
		this.crDate = crDate;
		this.edDate = edDate;
		this.salt = salt;
		this.rememberMe = rememberMe;
		this.status = status;
		this.sessions = sessions;
//		this.typesForCrUserId = typesForCrUserId;
//		this.userAccountsForEdUserId = userAccountsForEdUserId;
//		this.labelsForEdUserId = labelsForEdUserId;
//		this.citiesForCrUserId = citiesForCrUserId;
//		this.typedValuesForEdUserId = typedValuesForEdUserId;
//		this.methodSecurityLevelDefsForEdUserId = methodSecurityLevelDefsForEdUserId;
		this.userRoles = userRoles;
//		this.labelsForCrUserId = labelsForCrUserId;
//		this.typedValuesForCrUserId = typedValuesForCrUserId;
//		this.userAccountsForCrUserId = userAccountsForCrUserId;
//		this.typesForEdUserId = typesForEdUserId;
//		this.countiesForEdUserId = countiesForEdUserId;
//		this.objectSecurityLevelDefsForCrUserId = objectSecurityLevelDefsForCrUserId;
		this.userAccountById = userAccountById;
//		this.countiesForCrUserId = countiesForCrUserId;
//		this.citiesForEdUserId = citiesForEdUserId;
//		this.labelMLsForEdUserId = labelMLsForEdUserId;
//		this.objectSecurityLevelDefsForEdUserId = objectSecurityLevelDefsForEdUserId;
//		this.methodSecurityLevelDefsForCrUserId = methodSecurityLevelDefsForCrUserId;
//		this.labelMLsForCrUserId = labelMLsForCrUserId;
	}

	@Id
//	@GeneratedValue(strategy = IDENTITY) // commented out so we can use any PK
	@Column(name = "id", unique = true, nullable = false, length = 45)
	@NotNull
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "def_lang_id", nullable = false)
	@NotNull
	public Language getLanguage() {
		return this.language;
	}

	public void setLanguage(Language language) {
		this.language = language;
	}

	@TlzHidden
	@Column(name = "cur_sessionid", length = 45)
	public String getSessionId() {
		return this.sessionId;
	}

	public void setSessionId(String sessionId) {
		this.sessionId = sessionId;
	}

	@Column(name = "username", unique = true, nullable = false, length = 45)
	@NotNull
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@TlzHidden
	@Column(name = "password", nullable = false, length = 45)
	@NotNull
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "cr_date", nullable = false, length = 19)
	@NotNull
	public Date getCrDate() {
		return this.crDate;
	}

	public void setCrDate(Date crDate) {
		this.crDate = crDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "ed_date", length = 19)
	public Date getEdDate() {
		return this.edDate;
	}

	public void setEdDate(Date edDate) {
		this.edDate = edDate;
	}

	@TlzHidden
	@Column(name = "salt", length = 45)
	public String getSalt() {
		return this.salt;
	}

	public void setSalt(String salt) {
		this.salt = salt;
	}

	@Column(name = "remember_me")
	public Boolean getRememberMe() {
		return this.rememberMe;
	}

	public void setRememberMe(Boolean rememberMe) {
		this.rememberMe = rememberMe;
	}

	@Column(name = "status")
	public StatusEnum getStatus() {
		return this.status;
	}

	public void setStatus(StatusEnum status) {
		this.status = status;
	}

	@Column(name = "deleted", nullable = false)
	public Boolean getIsDeleted() {
		return this.isDeleted;
	}

	public void setIsDeleted(Boolean isDeleted) {
		this.isDeleted = isDeleted;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	@TlzHidden
	public Set<Session> getSessions() {
		return this.sessions;
	}

	public void setSessions(Set<Session> sessions) {
		this.sessions = sessions;
	}

//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCrUserId")
//	@TlzHidden
//	public Set<Type> getTypesForCrUserId() {
//		return this.typesForCrUserId;
//	}
//
//	public void setTypesForCrUserId(Set<Type> typesForCrUserId) {
//		this.typesForCrUserId = typesForCrUserId;
//	}

//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByEdUserId")
//	@TlzHidden
//	public Set<UserAccount> getUserAccountsForEdUserId() {
//		return this.userAccountsForEdUserId;
//	}
//
//	public void setUserAccountsForEdUserId(Set<UserAccount> userAccountsForEdUserId) {
//		this.userAccountsForEdUserId = userAccountsForEdUserId;
//	}

//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByEdUserId")
//	@TlzHidden
//	public Set<Label> getLabelsForEdUserId() {
//		return this.labelsForEdUserId;
//	}
//
//	public void setLabelsForEdUserId(Set<Label> labelsForEdUserId) {
//		this.labelsForEdUserId = labelsForEdUserId;
//	}

//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCrUserId")
//	@TlzHidden
//	public Set<City> getCitiesForCrUserId() {
//		return this.citiesForCrUserId;
//	}
//
//	public void setCitiesForCrUserId(Set<City> citiesForCrUserId) {
//		this.citiesForCrUserId = citiesForCrUserId;
//	}

//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByEdUserId")
//	@TlzHidden
//	public Set<TypedValue> getTypedValuesForEdUserId() {
//		return this.typedValuesForEdUserId;
//	}
//
//	public void setTypedValuesForEdUserId(Set<TypedValue> typedValuesForEdUserId) {
//		this.typedValuesForEdUserId = typedValuesForEdUserId;
//	}

//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByEdUserId")
//	@TlzHidden
//	public Set<MethodSecurityLevelDef> getMethodSecurityLevelDefsForEdUserId() {
//		return this.methodSecurityLevelDefsForEdUserId;
//	}
//
//	public void setMethodSecurityLevelDefsForEdUserId(Set<MethodSecurityLevelDef> methodSecurityLevelDefsForEdUserId) {
//		this.methodSecurityLevelDefsForEdUserId = methodSecurityLevelDefsForEdUserId;
//	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "user")
	@BatchSize(size = 4) 
	public Set<UserRole> getUserRoles() {
		return this.userRoles;
	}

	public void setUserRoles(Set<UserRole> userRoles) {
		this.userRoles = userRoles;
	}

//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCrUserId")
//	@TlzHidden
//	public Set<Label> getLabelsForCrUserId() {
//		return this.labelsForCrUserId;
//	}
//
//	public void setLabelsForCrUserId(Set<Label> labelsForCrUserId) {
//		this.labelsForCrUserId = labelsForCrUserId;
//	}

//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCrUserId")
//	@TlzHidden
//	public Set<TypedValue> getTypedValuesForCrUserId() {
//		return this.typedValuesForCrUserId;
//	}
//
//	public void setTypedValuesForCrUserId(Set<TypedValue> typedValuesForCrUserId) {
//		this.typedValuesForCrUserId = typedValuesForCrUserId;
//	}

//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCrUserId")
//	@TlzHidden
//	public Set<UserAccount> getUserAccountsForCrUserId() {
//		return this.userAccountsForCrUserId;
//	}
//
//	public void setUserAccountsForCrUserId(Set<UserAccount> userAccountsForCrUserId) {
//		this.userAccountsForCrUserId = userAccountsForCrUserId;
//	}

//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByEdUserId")
//	@TlzHidden
//	public Set<Type> getTypesForEdUserId() {
//		return this.typesForEdUserId;
//	}
//
//	public void setTypesForEdUserId(Set<Type> typesForEdUserId) {
//		this.typesForEdUserId = typesForEdUserId;
//	}

//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByEdUserId")
//	@TlzHidden
//	public Set<County> getCountiesForEdUserId() {
//		return this.countiesForEdUserId;
//	}
//
//	public void setCountiesForEdUserId(Set<County> countiesForEdUserId) {
//		this.countiesForEdUserId = countiesForEdUserId;
//	}

//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCrUserId")
//	@TlzHidden
//	public Set<ObjectSecurityLevelDef> getObjectSecurityLevelDefsForCrUserId() {
//		return this.objectSecurityLevelDefsForCrUserId;
//	}
//
//	public void setObjectSecurityLevelDefsForCrUserId(Set<ObjectSecurityLevelDef> objectSecurityLevelDefsForCrUserId) {
//		this.objectSecurityLevelDefsForCrUserId = objectSecurityLevelDefsForCrUserId;
//	}

	@OneToOne(fetch = FetchType.EAGER, mappedBy = "userById")
	public UserAccount getUserAccountById() {
		return this.userAccountById;
	}

	public void setUserAccountById(UserAccount userAccountById) {
		this.userAccountById = userAccountById;
	}

//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCrUserId")
//	@TlzHidden
//	public Set<County> getCountiesForCrUserId() {
//		return this.countiesForCrUserId;
//	}
//
//	public void setCountiesForCrUserId(Set<County> countiesForCrUserId) {
//		this.countiesForCrUserId = countiesForCrUserId;
//	}

//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByEdUserId")
//	@TlzHidden
//	public Set<City> getCitiesForEdUserId() {
//		return this.citiesForEdUserId;
//	}
//
//	public void setCitiesForEdUserId(Set<City> citiesForEdUserId) {
//		this.citiesForEdUserId = citiesForEdUserId;
//	}

//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByEdUserId")
//	@TlzHidden
//	public Set<LabelML> getLabelMLsForEdUserId() {
//		return this.labelMLsForEdUserId;
//	}
//
//	public void setLabelMLsForEdUserId(Set<LabelML> labelMLsForEdUserId) {
//		this.labelMLsForEdUserId = labelMLsForEdUserId;
//	}

//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByEdUserId")
//	@TlzHidden
//	public Set<ObjectSecurityLevelDef> getObjectSecurityLevelDefsForEdUserId() {
//		return this.objectSecurityLevelDefsForEdUserId;
//	}
//
//	public void setObjectSecurityLevelDefsForEdUserId(Set<ObjectSecurityLevelDef> objectSecurityLevelDefsForEdUserId) {
//		this.objectSecurityLevelDefsForEdUserId = objectSecurityLevelDefsForEdUserId;
//	}

//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCrUserId")
//	@TlzHidden
//	public Set<MethodSecurityLevelDef> getMethodSecurityLevelDefsForCrUserId() {
//		return this.methodSecurityLevelDefsForCrUserId;
//	}
//
//	public void setMethodSecurityLevelDefsForCrUserId(Set<MethodSecurityLevelDef> methodSecurityLevelDefsForCrUserId) {
//		this.methodSecurityLevelDefsForCrUserId = methodSecurityLevelDefsForCrUserId;
//	}

//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCrUserId")
//	@TlzHidden
//	public Set<LabelML> getLabelMLsForCrUserId() {
//		return this.labelMLsForCrUserId;
//	}
//
//	public void setLabelMLsForCrUserId(Set<LabelML> labelMLsForCrUserId) {
//		this.labelMLsForCrUserId = labelMLsForCrUserId;
//	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "userById")
	@BatchSize(size = 2) 
	public Set<UserConnection> getUserConnections() {
		return this.userConnections;
	}

	public void setUserConnections(Set<UserConnection> userConnections) {
		this.userConnections = userConnections;
	}

	////////////////////////////////////////////
	// Security implementation functions

	/**
	 * Helper function. Decides if the user has access to the given method.
	 * <p>
	 * Goes through all security Definitions linked to the User by his Roles. All of them must allow the action.
	 * </p>
	 * @param user
	 * @param method
	 * @return
	 */
	@Transient
	public boolean hasAccess(String method, String objectClass, Object id) {

		return true;
	}

	/**
	 * @param hasAccess
	 * @return
	 */
	@Transient
	protected boolean hasMethodAccess(String method) {
		// if nothing is defined in DB then Free ACCESS (to save us some data entry!)
		return true;
	}

	/**
	 * Helper function. Returns a list of all Method level security definitions that the user has based on his assigned Roles.
	 */
	@Transient
	public boolean isGod() {
		return hasRole(RoleEnum.GOD);
	}
	@Transient
	public boolean hasRole(RoleEnum re) {
		Iterator<UserRole> userRoles = getUserRoles().iterator();
		while (userRoles.hasNext()) {
			UserRole userRole = userRoles.next();
			Role role = userRole.getRole();

			if (role.getId().equals(re))
				return true;
		}
		return false;
	}
	@Transient
	public String getDefEmail() {
		if (getUserAccountById() != null && getUserAccountById().getDefEmail() != null) {
			return getUserAccountById().getDefEmail().getValue();
		}
		return null;
	}
	@Transient
	public boolean isFbEmail() {
		if (getUserAccountById() != null && getUserAccountById().getDefEmail() != null) {
			return getUserAccountById().getDefEmail().getType().getType().startsWith("fb");
		}
		return false;
	}
	@Override
	public boolean equals(Object obj) {
		if (obj instanceof User) {
			User u = (User)obj;
			if (u.getId().equals(getId()))
				return true;
		}
		return super.equals(obj);
	}

	public String toString() {
		return getId() + ": " + getUsername() + ": " + getStatus();
	}
}
