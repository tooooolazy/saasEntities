package db.entities;

// Generated 21 ��� 2012 12:09:39 �� by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Cacheable;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.annotations.BatchSize;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

import com.tooooolazy.gwt.widgets.shared.SelectItem;
import com.tooooolazy.util.Messages;

import db.enums.StatusEnum;

/**
 * City generated by hbm2java
 */
@Entity
@BatchSize(size=50)
@Table(name = "cities")
@Cacheable
@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
public class City implements java.io.Serializable, SelectItem {

	private Integer id;
	private User userByEdUserId;
	private User userByCrUserId;
	private County county;
	private String city;
	private Date crDate;
	private Date edDate;
	private Label label;
	private Set<CityZip> cityZips = new HashSet<CityZip>(0);
	private Set<Address> addresses = new HashSet<Address>(0);
	private City aliasFor;
	private StatusEnum status;

	public City() {
	}

	public City(County county, Date crDate) {
		this.county = county;
		this.crDate = crDate;
	}

	public City(User userByEdUserId, User userByCrUserId, County county,
			String city, Date crDate, Date edDate) {
		this.userByEdUserId = userByEdUserId;
		this.userByCrUserId = userByCrUserId;
		this.county = county;
		this.city = city;
		this.crDate = crDate;
		this.edDate = edDate;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ed_user_id")
	public User getUserByEdUserId() {
		return this.userByEdUserId;
	}

	public void setUserByEdUserId(User userByEdUserId) {
		this.userByEdUserId = userByEdUserId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "cr_user_id")
	public User getUserByCrUserId() {
		return this.userByCrUserId;
	}

	public void setUserByCrUserId(User userByCrUserId) {
		this.userByCrUserId = userByCrUserId;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "county_id", nullable = false)
	public County getCounty() {
		return this.county;
	}

	public void setCounty(County county) {
		this.county = county;
	}

	@Column(name = "city", length = 50)
	public String getCity() {
		return this.city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "cr_date", nullable = false, length = 19)
	public Date getCrDate() {
		return this.crDate;
	}

	public void setCrDate(Date crDate) {
		this.crDate = crDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "ed_date", length = 19)
	public Date getEdDate() {
		return this.edDate;
	}

	public void setEdDate(Date edDate) {
		this.edDate = edDate;
	}

	@OneToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "label_id")
	public Label getLabel() {
		return this.label;
	}

	public void setLabel(Label label) {
		this.label = label;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "city")
	public Set<CityZip> getCityZips() {
		return this.cityZips;
	}

	public void setCityZips(Set<CityZip> cityZips) {
		this.cityZips = cityZips;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "city")
	public Set<Address> getAddresses() {
		return this.addresses;
	}

	public void setAddresses(Set<Address> addresses) {
		this.addresses = addresses;
	}

	@OneToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "alias_id", nullable = true)
	public City getAliasFor() {
		return this.aliasFor;
	}

	public void setAliasFor(City aliasFor) {
		this.aliasFor = aliasFor;
	}

	@Column(name = "status")
	public StatusEnum getStatus() {
		return this.status;
	}

	public void setStatus(StatusEnum status) {
		this.status = status;
	}

	@Override
	@Transient
	public Object getPK() {
		return id;
	}

	@Override
	@Transient
	public boolean hasLangDefined(String lang) {
		if (getLabel() != null) {
			for (LabelML ml : getLabel().getLabelMLs()) {
				if (ml.getLanguage().getLanguage().equals(lang))
					return true;
			}
		}
		return false;
	}
	@Override
	@Transient
	public String getDisplayValue(String lang) {
		if (getLabel() != null) {
			return getLabel().getDisplayValue(lang);
		}
		return getDefaultValue();
	}
	@Override
	@Transient
	public String getDefaultValue() {
		return getCity();
	}
	public String toString() {
		String s = getDisplayValue(Messages.getLang());
		if (s == null)
			s = getDefaultValue();
		return s;
	}
}
